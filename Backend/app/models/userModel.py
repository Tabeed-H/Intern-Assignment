from beanie import Document, Indexed        # For MongoDB document mapping
from typing import Optional
from pydantic import Field, EmailStr       # For Data Validation
from uuid import UUID, uuid4                # For Generating UUIDS
from datetime import datetime               # For Working With Dates

# Creating a User Class Inheriting from "Docemnet" indication a MongoDB Document
class User(Document): 
    userId: UUID = Field(default_factory=uuid4)     # UUID field generated by 'uuid4'
    userName: Indexed(str, unique=True)             # Indexed String Field and should be unique
    email: Indexed(EmailStr, unique = True)         # Indexed String Field
    hashedPass : str
    firstName: Optional[str] = None
    lastName: Optional[str] = None
    disabled: Optional[bool] = None

    def __repr__(self) -> str:
        """
        This method provides a string representation of the object

        returns
        ------
        A string with the format '<User {self.email}'

        """
        return f"<User {self.email}>"
    
    def __str__(self) -> str:
        """
        This method provides a humann-readable string representaion of the object

        returns
        -------
        Email address of the user

        """
        return self.email
    
    def __hash__(self) -> int:
        """
        This method defines a custom hash value for instances of the class based on the user's email.
        It allows instances to be used in hash-based collections like sets
        """
        return hash(self.email)
    
    def __eq__(self, other: object) -> bool:
        """
        This method defined the equality comparison between two instances of the class.

        returns
        ------
        'True' if the email addresses are equal, 
        'False' otherwise

        """
        if isinstance(other, User):
            return self.email == other.email
        return False
    

    @property
    def create(self) -> datetime:
        """
        Property that returns the creation time of the user object based on its MongoDB ID
        """

        return self.id.generation_time
    
    @classmethod
    async def byEmail(self, email:str) -> "User":
        """
        Async finds and returns a user by their email address
        Uses 'Find_One' method from the 'Document' class
        
        """
        return await self.find_one(self.email == email)
    
    """
    Defines the settings for the 'User' class
    Sets the collention name to "users" in MongoDB
    
    """
    class Settings:
        name = "users"
        use_revision = True
